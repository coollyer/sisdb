
# 配置文件说明：
# 配置时，值如果需要有',' 就必须用引号包含起来
# 查询时 key 不能包含'.' , 否则搜索的时候会有问题
# include 空格 后跟文件名，相对当前conf的目录
# 数组和集合必须加逗号，最后一个元素不加逗号

# 写日志的路径
# 根据任务名不同各自生成不同的log
log : {
  screen : 1,
  path : logs , # 目录
  level : 6,  # 级别
  maxsize : 10  #最大尺寸 单位M
}
# 该配置存放所有的服务配置 根据带参数来确定调用的服务
# 程序运行时如果不加参数，就会列出所有支持的服务
#
# 每个任务一个线程，互不影响和干涉，
# 这样做的目的仅仅就是不想多开目录，一个程序搞定所有的数据来源程序

workers : {
  sys1 : {
      # work-time: once, # 默认值，每次启动该类只运行一次working 执行完就销毁
      work-time: notice # 等候通知去执行working, 执行期间的通知忽略, 执行后再等下一个通知
      # work-time: {      # 有该字段时，表示有 working 
      #   always-work : { start: 0, stop: 0, delay: 7000 } # 在指定时间内 每隔 delay 毫秒运行一次working
      #   # plans-work : [900, 1200, 1530]  # 计划任务 按数组中指定时间触发working 单位为分钟
      # }
  },
  # 如果没有 classname 就直接用key作为类名去建立工作者 此时工作者和类名一致
  sys2 : {
    # classname : sys1, # 根据classname名来调用对应的函数
    # 方式1:
    # source: &sys1-test, # 表示source对象 引用工作名为sys1-test的实例，去当前类的父节点寻找匹配的工作者
    # 方式2:
    # workers : {
    #   input : sys1-test, # 直接跟名字，就先找子类工作名，找不到再找父类工作名 退出时不需释放
    #   output : {   # 跟json, 新创建一个工作类 退出时需要释放
    #     classname : sys2,
    #   }
    # },
    # 方式三： 由服务自行解释各个参数的意义
    # argv : {
    #   input : sys1,
    #   output : {   # 跟json, 新创建一个工作类 退出时需要释放
    #     classname : sys2,
    #   }
    # }
    work-time: { # 有该字段时，表示需要定时运行
      # once : 1 一次运行，默认值，每次开机即运行一次
      always-work : { start:900,stop:2330,delay:5000 }
      # plans-work : [900, 1200, 1530]  # 设置该字段表示数组中分钟为定点运行， 单位为分钟
    }
  }
}
