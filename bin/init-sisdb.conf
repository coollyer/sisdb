
{
  cmd : setuser,       # 创建方法
  info  : {
      username : guest,
      password : guest1234,
      access   : read           
  }
}
{
  cmd : setuser,       # 创建方法
  info  : {
      username : sisdb,
      password : sisdb1234,
      access   : write           
  }
}
{
  cmd : setuser,       # 创建方法
  info  : {
      username : admin,
      password : admin5678,
      access   : admin           
  }
}
# 到这里为止 以上是必须的初始化信息 可以用户定制 
# 以下是预先定义的表和数据集合
# 数据类型
# I - 有符号整数 U - 无符号整数 C - 字符型 F - 浮点数 
# W - 微秒  T - 毫秒  S - 秒   M - 分钟   D - 日期
# 是否索引(不重复字段)
{
  cmd   : open,      # 打开一个服务 
  subject   : after,     # 服务名字为 after
  info  : {
    work-path : data,
    save-time : 40000,   # 4点存盘和清理数据 0 表示隔天清理 
    classname : frwdb    # 服务类名
  }
}
{
  service   : after,     # 名字为 after 的服务
  cmd   : create,    # after下的命令 
  subject   : stk_info,
  info  : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      code     : [C, 16, 1, 0, O],    # SH600600
      name     : [C, 64],     # 青岛啤酒
      market   : [C,  4],     # SH
      type     : [U,  1],     # 类型
      point    : [U,  1],     # 小数点 默认为 2
      pzoom    : [U,  1],     # 价格最小分辨率 价格都要除以10^pzoom才是真正的价格 默认为 3
      vunit    : [U,  1]      # 成交量单位 量都要乘以10^vunit才是真正的量 默认为 2 指数为 4 
    }
  }
}
{
  service   : after,     # 名字为 after 的服务
  cmd   : create,    # after下的命令 
  subject : stk_min,
  info  : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time     : [M,  4, 1, 0, IO],     # 分钟
      open     : [P,  4],     # 开盘价
      high     : [P,  4],     # 最高价
      low      : [P,  4],     # 最低价
      newp     : [P,  4],     # 收盘价
      volume   : [U,  8],     # 成交总量 * 10^vunit
      money    : [U,  8]      # 成交总金额= * 10^vunit
    }
  }
}
{
  service   : after,     # 名字为 after 的服务
  cmd   : create,    # after下的命令 
  subject : stk_day,   # 日线
  info  : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time     : [D,  4, 1, 0, IO],     # 日期
      open     : [P,  4],     # 开盘价
      high     : [P,  4],     # 最高价
      low      : [P,  4],     # 最低价
      newp     : [P,  4],     # 收盘价
      volume   : [U,  8],     # 成交总量 * 10^vunit
      money    : [U,  8]      # 成交总金额= * 10^vunit
    }
  }
}
{
  service   : after,     # 名字为 after 的服务
  cmd   : create,    # after下的命令 
  subject : stk_right,  # 除权数据
  info  : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time      : [D,  4, 1, 0, IO],  # 日期
      sgs       : [I,  4],  # 每十股送股数(股)  (*1000)
      pgs       : [I,  4],  # 每十股配股数(股)  (*1000)
      pgj       : [I,  4],  # 配股价(元)       (*1000)
      pxs       : [I,  4]   # 每十股派息数(元)  (*1000)
    }
  }
}
{
  service   : after,     # 名字为 after 的服务
  cmd   : create,    # after下的命令 
  subject : stk_fund,  # 财务数据
  info  : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time   : [D,  4, 1, 0, IO],  # 日期
      ssrq   : [U,  4],        # 上市日期(年月日)
      zgb    : [U,  4],        # 总股本(百股)
      ltag   : [U,  4],        # 流通A股(百股)
      mgsy   : [F,  4, 1, 4],  # 每股收益(元)
      mgjzc  : [F,  4, 1, 4],  # 每股净资产(元) 
      jzcsyl : [F,  4, 1, 2],  # 净资产收益率(%) 
      mggjj  : [F,  4, 1, 2],  # 每股公积金
      mgwfp  : [F,  4, 1, 4],  # 每股未分配利润
      mgxj   : [F,  4, 1, 4],  # 每股现金
      yysr   : [I,  4],        # 营业收入(万元)  
      jlr    : [I,  4],        # 净利润(万元)
      tzsy   : [I,  4],        # 投资收益(万元) 
      yszk   : [I,  4],        # 应收账款(万元)  
      hbzj   : [I,  4],        # 货币资金(万元)  -- 总现金
      ldzj   : [I,  4],        # 流动资金(万元)  -- 总现金
      sykc   : [I,  4]         # 剩余库存(万元)   
    }
  }
}
# 以下是实时文件部分
{
  cmd   : open,      # 打开一个服务 
  subject : snodb,     # 服务名字为 snodb
  info  : {
    work-path : data,
    save-time : 160000,  # 16点存盘和清理数据 0 表示隔天清理 
    classname : snodb    # 服务类名
  }
}
{
  service   : snodb,      # 名字为 snodb 的服务
  cmd     : create,    # snodb 下的命令 
  subject : stk_info,  # 证券信息
  info : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      code     : [C, 16, 1, 0, O],    # SH600600
      name     : [C, 64],     # 青岛啤酒
      market   : [C,  4],     # SH
      type     : [U,  1],     # 类型
      point    : [U,  1],     # 小数点 默认为 2
      pzoom    : [U,  1],     # 价格最小分辨率 价格都要除以10^pzoom才是真正的价格 默认为 3
      vunit    : [U,  1]      # 成交量单位 量都要乘以10^vunit才是真正的量 默认为 2 指数为 4 
    }
  }
}
{
  service   : snodb,      # 名字为 snodb 的服务
  cmd   : create,    # snodb 下的命令 
  subject : stk_snapshot,  # 股票快照
  info : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time     : [T,  8],     # 毫秒 默认为主索引
      open     : [P,  4],     # 开盘价
      high     : [P,  4],     # 最高价
      low      : [P,  4],     # 最低价
      newp     : [P,  4],     # 收盘价
      volume   : [U,  8],     # 成交总量 * 10^vunit
      money    : [U,  8],     # 成交总金额= * 10^vunit
      agop     : [P,  4],     # 昨收
      stophigh : [P,  4],     # 涨停
      stoplow  : [P,  4],     # 跌停
      cjbs     : [U,  4],     # 成交笔数=实际笔数(单位: 笔)
      waskp    : [P,  4],     # 加权平均委买价格
      waskv    : [U,  8],     # 委托买入总量* 10^vunit
      wbidp    : [P,  4],     # 加权平均委卖价格
      wbidv    : [U,  8],     # 委托卖出总量 * 10^vunit
      askp     : [P,  4, 10], # 申买价
      askv     : [U,  8, 10], # 申买量* 10^vunit
      bidp     : [P,  4, 10], # 申卖价
      bidv     : [U,  8, 10]  # 申卖量* 10^vunit
    }
  }
}
{
  service   : snodb,      # 名字为 snodb 的服务
  cmd   : create,    # snodb 下的命令 
  subject : idx_snapshot,  # 指数快照
  info : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time     : [T,  8],     # 毫秒 默认为主索引
      open     : [P,  4],     # 开盘价
      high     : [P,  4],     # 最高价
      low      : [P,  4],     # 最低价
      newp     : [P,  4],     # 收盘价
      volume   : [U,  8],     # 成交总量 * 10^vunit (单位: 万股)
      money    : [U,  8],     # 成交总金额= * 10^vunit (单位: 万元)
      agop     : [P,  4]      # 昨收
    }
  }
}
{
  service   : snodb,      # 名字为 snodb 的服务
  cmd   : create,    # snodb 下的命令 
  subject : stk_transact,  # 逐笔
  info : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time     : [T,  8],     # 毫秒
      flag     : [C,  1],     # 买卖方向(买：'B', 卖：'S',撤单：'C') 撤单时newp为0 
      type     : [C,  1],     # 标志
      newp     : [P,  4],     # 成交价格/ 10^pzoom
      volume   : [U,  4],     # 成交数量 **股数** 
      order    : [U,  4],     # 成交编号
      askorder : [U,  4],     # 叫卖方委托序号
      bidorder : [U,  4],     # 叫买方委托序号
      sindex   : [U,  8]      # 顺序ID
    }
  }
}
{
  service   : snodb,      # 名字为 snodb 的服务
  cmd   : create,    # snodb 下的命令 
  subject : stk_orders,  # 逐笔
  info : {
    fields: {
      # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
      time     : [T,  8],     # 毫秒
      flag     : [C,  1],     # 买卖方向(买：'B', 卖：'S',撤单：'C') 撤单时newp为0 
      type     : [C,  1],
      newp     : [P,  4],     # 成交价格/ 10^pzoom
      volume   : [U,  4],     # 成交数量 **股数** 
      order    : [U,  4],     # 委托号
      sindex   : [U,  8]      # 逐笔的顺序ID
    }
  }
}
# {
#   service   : snodb,      # 名字为 snodb 的服务
#   cmd   : create,    # snodb 下的命令 
#   subject : stk_mmpqueues,  # 金融期货
#   info : {
#     fields: {
#       # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
#       time     : [T,  8],     # 毫秒
#       askp     : [P,  4],     # 成交价格/ 10^pzoom
#       asknum   : [U,  4],     # 队列实际数量 0 .. MAXINT
#       askv     : [U,  4, 50], # 委托数量 **股数** 
#       bidp     : [P,  4],     # 成交价格/ 10^pzoom
#       bidnum   : [U,  4],     # 队列实际数量 0 .. MAXINT
#       bidv     : [U,  4, 50]  # 委托数量 **股数** 
#     }
#   }
# }
# {
#   service   : snodb,      # 名字为 snodb 的服务
#   cmd   : create,    # snodb 下的命令 
#   subject : cff_snapshot,  # 金融期货
#   info : {
#     fields: {
#       # 字段名 | 数据类型 | 长度 | 数量(默认为1) | 小数点(默认为0) | 是否索引(不重复字段)
#       time     : [T,  8],     # 毫秒
#       open     : [P,  4],     # 开盘价/ 10^pzoom
#       high     : [P,  4],     # 最高价/ 10^pzoom
#       low      : [P,  4],     # 最低价/ 10^pzoom
#       newp     : [P,  4],     # 收盘价/ 10^pzoom
#       volume   : [U,  4],     # 成交总量 * 10^vunit
#       money    : [U,  4],     # 成交总金额= * 10^vunit
#       agop     : [P,  4],     # 昨收 / 10^pzoom
#       stophigh : [P,  4],     # 涨停 / 10^pzoom
#       stoplow  : [P,  4],     # 跌停 / 10^pzoom
#       agocc    : [U,  4],     # 昨持仓 / 10^pzoom
#       agojs    : [U,  4],     # 昨结算 / 10^pzoom
#       curcc    : [U,  4],     # 持仓总量 * 10^vunit
#       cursp    : [U,  4],     # 今收盘 / 10^pzoom
#       curjs    : [U,  4],     # 今结算 / 10^pzoom
#       askp     : [U,  4, 5],  # 申买价/ 10^pzoom
#       askv     : [U,  4, 5],  # 申买量* 10^vunit
#       bidp     : [U,  4, 5],  # 申卖价/ 10^pzoom
#       bidv     : [U,  4, 5]   # 申卖量* 10^vunit
#     }
#   }
# }

# {
#   cmd   : open,      # 打开一个服务 
#   subject : convert,   # 服务名字为 snodb
#   info : {
#     converts : { 
#       snodb.stk_snapshot : [after.stk_min, after.stk_day]
#       snodb.stk_info : [after.stk_info],
#     },
#     classname : sis_convert    # 服务类名 
#   }
# }

{
  service   : after,
  cmd   : save      # 打开一个服务 
}

{
  service   : snodb,
  cmd   : save      # 打开一个服务 
}